@startuml

class ProcessState {
    + static sp<ProcessState> self()
    + static sp<ProcessState> selfOrNull()
    + static sp<ProcessState> initWithDriver(const char *driver)
    + void setContextObject(const sp<IBinder>& object)
    + sp<IBinder> getContextObject(const sp<IBinder>& caller)
    + void setContextObject(const sp<IBinder>& object, const String16& name)
    + sp<IBinder> getContextObject(const String16& name, const sp<IBinder>& caller)
    + void startThreadPool()
    + bool isContextManager()
    + bool becomeContextManager(context_check_func checkFunc, void* userData)
    + sp<IBinder> getStrongProxyForHandle(int32_t handle)
    + wp<IBinder> getWeakProxyForHandle(int32_t handle)
    + void expungeHandle(int32_t handle, IBinder* binder)
    + void spawnPooledThread(bool isMain)
    + status_t setThreadPoolMaxThreadCount(size_t maxThreads)
    + void giveThreadPoolName()
    + String8 getDriverName()
    + ssize_t getKernelReferences(size_t count, uintptr_t* buf)
    + void setCallRestriction(CallRestriction restriction)

    - explicit ProcessState(const char* driver)
    - ~ProcessState()
    - ProcessState(const ProcessState& o)
    - ProcessState& operator=(const ProcessState& o)
    - String8 makeBinderThreadName()
    - handle_entry* lookupHandleLocked(int32_t handle)

    - String8 mDriverName
    - int mDriverFD
    - void* mVMStart
    - pthread_mutex_t mThreadCountLock
    - pthread_cond_t mThreadCountDecrement
    - size_t mExecutingThreadsCount
    - size_t mMaxThreads
    - int64_t mStarvationStartTimeMs
    - Mutex mLock
    - Vector<handle_entry> mHandleToObject
    - bool mManagesContexts
    - context_check_func mBinderContextCheckFunc
    - void* mBinderContextUserData
    - KeyedVector<String16, sp<IBinder>> mContexts
    - String8 mRootDir
    - bool mThreadPoolStarted
    - volatile int32_t mThreadPoolSeq
    - CallRestriction mCallRestriction
}

class IPCThreadState {
    + static IPCThreadState* self()
    + static IPCThreadState* selfOrNull()
    + sp<ProcessState> process()
    + status_t clearLastError()
    + pid_t getCallingPid() const
    + const char* getCallingSid() const
    + uid_t getCallingUid() const
    + void setStrictModePolicy(int32_t policy)
    + int32_t getStrictModePolicy() const
    + int64_t setCallingWorkSourceUid(uid_t uid)
    + int64_t setCallingWorkSourceUidWithoutPropagation(uid_t uid)
    + uid_t getCallingWorkSourceUid() const
    + int64_t clearCallingWorkSource()
    + void restoreCallingWorkSource(int64_t token)
    + void clearPropagateWorkSource()
    + bool shouldPropagateWorkSource() const
    + void setLastTransactionBinderFlags(int32_t flags)
    + int32_t getLastTransactionBinderFlags() const
    + int64_t clearCallingIdentity()
    + void restoreCallingIdentity(int64_t token)
    + int setupPolling(int* fd)
    + status_t handlePolledCommands()
    + void flushCommands()
    + void joinThreadPool(bool isMain = true)
    + void stopProcess(bool immediate = true)
    + status_t transact(int32_t handle, uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags)
    + void incStrongHandle(int32_t handle, BpBinder *proxy)
    + void decStrongHandle(int32_t handle)
    + void incWeakHandle(int32_t handle, BpBinder *proxy)
    + void decWeakHandle(int32_t handle)
    + status_t attemptIncStrongHandle(int32_t handle)
    + static void expungeHandle(int32_t handle, IBinder* binder)
    + status_t requestDeathNotification(int32_t handle, BpBinder* proxy)
    + status_t clearDeathNotification(int32_t handle, BpBinder* proxy)
    + static void shutdown()
    + static void disableBackgroundScheduling(bool disable)
    + bool backgroundSchedulingDisabled()
    + void blockUntilThreadAvailable()
    + bool isServingCall() const

    - status_t sendReply(const Parcel& reply, uint32_t flags)
    - status_t waitForResponse(Parcel *reply, status_t *acquireResult=nullptr)
    - status_t talkWithDriver(bool doReceive=true)
    - status_t writeTransactionData(int32_t cmd, uint32_t binderFlags, int32_t handle, uint32_t code, const Parcel& data, status_t* statusBuffer)
    - status_t getAndExecuteCommand()
    - status_t executeCommand(int32_t command)
    - void processPendingDerefs()
    - void processPostWriteDerefs()
    - void clearCaller()
    - static void threadDestructor(void *st)
    - static void freeBuffer(Parcel* parcel, const uint8_t* data, size_t dataSize, const binder_size_t* objects, size_t objectsSize, void* cookie)

    - sp<ProcessState> mProcess
    - Vector<BBinder*> mPendingStrongDerefs
    - Vector<RefBase::weakref_type*> mPendingWeakDerefs
    - Vector<RefBase*> mPostWriteStrongDerefs
    - Vector<RefBase::weakref_type*> mPostWriteWeakDerefs
    - Parcel mIn
    - Parcel mOut
    - status_t mLastError
    - pid_t mCallingPid
    - const char* mCallingSid
    - uid_t mCallingUid
    - int32_t mWorkSource
    - bool mPropagateWorkSource
    - int32_t mStrictModePolicy
    - int32_t mLastTransactionBinderFlags
    - IPCThreadStateBase *mIPCThreadStateBase
    - ProcessState::CallRestriction mCallRestriction

    static const int32_t kUnsetWorkSource = -1
}

ProcessState ..> IPCThreadState : <<friend>>
@enduml

